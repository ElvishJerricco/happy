{-# OPTIONS -cpp #-}
module Scan(lexer, AlexPosn(..), Token(..), Tkn(..), tokPosn) where

import Data.Char
import Debug.Trace
#if __GLASGOW_HASKELL__ >= 503
import Data.Array
import Data.Char (ord)
import Data.Array.Base (unsafeAt)
#else
import Array
import Char (ord)
#endif
alex_base :: Array Int Int
alex_base = listArray (0,64) [-8,110,115,-2,-4,2,-32,-31,0,168,81,0,-19,-18,0,29,-28,249,286,400,291,143,146,-27,113,260,491,570,593,366,374,0,0,664,778,619,862,946,1007,1121,1235,1349,1346,1431,1515,1576,0,78,431,141,142,-26,0,316,695,317,318,-25,0,0,0,1660,1744,0,0]

alex_table :: Array Int Int
alex_table = listArray (0,1999) [0,3,3,3,3,3,-1,3,3,3,3,3,-1,4,4,11,11,14,21,49,55,0,0,0,3,0,12,8,9,42,3,0,8,8,8,8,8,7,8,-1,32,32,32,32,32,32,32,32,32,32,0,8,59,0,0,8,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,26,8,8,17,-1,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,8,8,8,3,3,3,3,3,3,3,3,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,47,0,0,3,0,0,0,0,3,0,0,0,-1,-1,-1,63,6,-1,0,60,0,6,24,24,24,24,24,24,24,24,24,24,0,64,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,17,47,47,17,0,-1,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-1,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,38,0,0,15,20,20,20,20,20,20,20,20,20,20,0,0,17,24,24,24,24,24,24,24,24,24,24,20,0,0,0,0,20,0,19,-1,-1,-1,0,0,23,0,0,19,19,19,19,19,19,19,19,19,19,16,0,0,0,0,16,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,53,53,53,0,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,20,0,0,0,0,0,0,19,48,48,48,48,48,23,0,0,19,19,19,19,19,19,19,19,19,19,16,0,0,0,0,48,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,46,0,0,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,25,25,25,25,25,25,25,25,25,25,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,27,27,27,27,27,27,27,27,27,27,48,48,48,48,48,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,48,0,0,0,0,0,0,27,27,27,27,27,27,51,0,0,27,27,27,27,27,27,48,48,48,48,48,0,0,46,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,48,0,0,0,0,0,0,34,54,54,54,54,54,51,0,0,34,34,34,34,34,34,34,34,34,34,0,0,0,46,0,54,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,52,0,0,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,34,0,0,0,0,0,51,0,0,34,34,34,34,34,34,34,34,34,34,0,0,0,46,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,37,0,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,35,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,40,0,0,0,0,0,57,0,0,40,40,40,40,40,40,40,40,40,40,0,0,0,52,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,40,0,0,0,0,0,57,0,0,40,40,40,40,40,40,40,40,40,40,0,0,0,52,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,45,44,0,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,41,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,41,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,62,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

alex_check :: Array Int Int
alex_check = listArray (0,1999) [-1,9,10,11,12,13,10,9,10,11,12,13,10,45,45,34,34,45,45,45,45,-1,-1,-1,32,-1,34,35,36,37,32,-1,40,41,42,43,44,45,46,10,48,49,50,51,52,53,54,55,56,57,-1,59,60,-1,-1,63,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,58,10,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,9,10,11,12,13,9,10,11,12,13,48,49,50,51,52,53,54,55,56,57,61,-1,-1,32,-1,-1,-1,-1,32,-1,-1,-1,10,10,10,44,45,10,-1,48,-1,45,48,49,50,51,52,53,54,55,56,57,-1,62,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,58,61,61,58,-1,125,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,10,-1,-1,-1,-1,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,-1,-1,45,9,10,11,12,13,9,10,11,12,13,-1,-1,58,48,49,50,51,52,53,54,55,56,57,32,-1,-1,-1,-1,32,-1,39,10,10,10,-1,-1,45,-1,-1,48,49,50,51,52,53,54,55,56,57,58,-1,-1,-1,-1,58,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,61,61,61,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,10,11,12,13,48,49,50,51,52,53,54,55,48,49,50,51,52,53,54,55,-1,-1,32,-1,-1,-1,-1,-1,-1,39,9,10,11,12,13,45,-1,-1,48,49,50,51,52,53,54,55,56,57,58,-1,-1,-1,-1,32,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,61,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,48,49,50,51,52,53,54,55,56,57,9,10,11,12,13,-1,-1,65,66,67,68,69,70,48,49,50,51,52,53,54,55,56,57,32,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,45,-1,-1,97,98,99,100,101,102,9,10,11,12,13,-1,-1,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,98,99,100,101,102,32,-1,-1,-1,-1,-1,-1,39,9,10,11,12,13,45,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,61,-1,32,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,61,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,-1,-1,39,-1,-1,-1,-1,-1,45,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,61,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,39,-1,-1,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,39,-1,125,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,-1,-1,125,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,-1,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,-1,-1,39,-1,-1,-1,-1,-1,45,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,61,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,-1,-1,39,-1,-1,-1,-1,-1,45,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,61,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,9,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,-1,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,39,-1,-1,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,39,-1,125,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,-1,-1,125,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,-1,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,39,-1,-1,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,39,-1,-1,-1,-1,-1,-1,-1,-1,48,49,50,51,52,53,54,55,56,57,-1,-1,-1,-1,-1,-1,-1,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,-1,-1,-1,-1,95,-1,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]

alex_deflt :: Array Int Int
alex_deflt = listArray (0,64) [-1,-1,-1,-1,5,5,-1,-1,-1,-1,58,-1,13,13,-1,22,-1,22,-1,-1,-1,22,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,50,-1,50,50,-1,-1,56,-1,56,56,-1,-1,-1,-1,-1,-1,-1,-1]

alex_accept = listArray (0::Int,64) [[],[],[],[(AlexAcc 0 (skip ) Nothing Nothing)],[(AlexAcc 0 (skip ) Nothing Nothing)],[(AlexAcc 0 (skip ) Nothing Nothing)],[],[(AlexAcc 1 (special ) Nothing Nothing)],[(AlexAcc 1 (special ) Nothing Nothing)],[(AlexAcc 1 (special ) Nothing Nothing)],[(AlexAcc 2 (brace ) Nothing Nothing)],[(AlexAcc 3 (string ) Nothing Nothing)],[],[],[(AlexAcc 4 (bind ) Nothing Nothing)],[(AlexAcc 4 (bind ) Nothing Nothing)],[],[],[(AlexAcc 9 (char ) Nothing Nothing)],[],[],[],[],[],[(AlexAcc 5 (decch ) Nothing Nothing)],[(AlexAcc 5 (decch ) Nothing Nothing)],[],[(AlexAcc 6 (hexch ) Nothing Nothing)],[(AlexAcc 8 (escape ) Nothing Nothing)],[(AlexAcc 7 (octch ) Nothing Nothing)],[(AlexAcc 8 (escape ) Nothing Nothing)],[(AlexAcc 8 (escape ) Nothing Nothing)],[(AlexAcc 9 (char ) Nothing Nothing)],[(AlexAcc 10 (smac ) Nothing Nothing)],[(AlexAcc 10 (smac ) Nothing Nothing)],[(AlexAcc 10 (smac ) Nothing Nothing)],[],[],[],[(AlexAcc 11 (rmac ) Nothing Nothing)],[(AlexAcc 11 (rmac ) Nothing Nothing)],[(AlexAcc 11 (rmac ) Nothing Nothing)],[],[],[],[],[(AlexAcc 12 (smacdef ) Nothing Nothing)],[(AlexAcc 12 (smacdef ) Nothing Nothing)],[],[],[],[],[(AlexAcc 13 (rmacdef ) Nothing Nothing)],[(AlexAcc 13 (rmacdef ) Nothing Nothing)],[],[],[],[],[(AlexAcc 14 (code ) Nothing Nothing)],[(AlexAcc 15 (special `andBegin` startcodes ) Nothing Nothing)],[(AlexAcc 16 (zero ) Nothing Nothing)],[(AlexAcc 17 (startcode ) Nothing Nothing)],[(AlexAcc 17 (startcode ) Nothing Nothing)],[(AlexAcc 18 (special ) Nothing Nothing)],[(AlexAcc 19 (special `andBegin` 0 ) Nothing Nothing)]]
-- -----------------------------------------------------------------------------
-- Token type

data Token = T AlexPosn Tkn
  deriving Show

tokPosn (T p _) = p

data Tkn
 = SpecialT Char
 | CodeT String
 | ZeroT
 | IdT String
 | StringT String
 | BindT String
 | CharT Char
 | SMacT String
 | RMacT String  
 | SMacDefT String
 | RMacDefT String  
 | NumT Int	
 | EOFT
 deriving Show

-- -----------------------------------------------------------------------------
-- Token functions

special   (p,str) ln = return $ T p (SpecialT  (head str))
brace     (p,str) ln = return $ T p (SpecialT  '{')
zero      (p,str) ln = return $ T p ZeroT
string    (p,str) ln = return $ T p (StringT (extract ln str))
bind      (p,str) ln = return $ T p (BindT (takeWhile isIdChar str))
escape    (p,str) ln = return $ T p (CharT (esc str))
decch     (p,str) ln = return $ T p (CharT (do_ech 10 ln (take (ln-1) (tail str))))
hexch     (p,str) ln = return $ T p (CharT (do_ech 16 ln (take (ln-2) (drop 2 str))))
octch     (p,str) ln = return $ T p (CharT (do_ech 8  ln (take (ln-2) (drop 2 str))))
char      (p,str) ln = return $ T p (CharT (head str))
smac      (p,str) ln = return $ T p (SMacT (mac ln str))
rmac      (p,str) ln = return $ T p (RMacT (mac ln str))
smacdef   (p,str) ln = return $ T p (SMacDefT (macdef ln str))
rmacdef   (p,str) ln = return $ T p (RMacDefT (macdef ln str))
startcode (p,str) ln = return $ T p (IdT (take ln str))

isIdChar c = isAlphaNum c || c `elem` "_'"

extract ln str = take (ln-2) (tail str)
		
do_ech radix ln str = chr (parseInt radix str)

mac ln (_ : str) = take (ln-1) str

macdef ln (_ : str) = takeWhile (not.isSpace) str

esc (_ : x : _)  =
 case x of
   'a' -> '\a'
   'b' -> '\b'
   'f' -> '\f'
   'n' -> '\n'
   'r' -> '\r'
   't' -> '\t'
   'v' -> '\v'
   c   ->  c

parseInt :: Int -> String -> Int
parseInt radix ds = foldl1 (\n d -> n * radix + d) (map digitToInt ds)

-- In brace-delimited code, we have to be careful to match braces
-- within the code, but ignore braces inside strings and character
-- literals.  We do an approximate job (doing it properly requires
-- implementing a large chunk of the Haskell lexical syntax).

code (p,inp) len = go 1 ""
 where
  go 0 cs = return (T p (CodeT (reverse (tail cs))))
  go n cs = do
    c <- alexGetChar
    case c of
	Nothing  -> err
	Just c   -> case c of
			'{'  -> go (n+1) (c:cs)
			'}'  -> go (n-1) (c:cs)
			'\'' -> go_char n (c:cs)
			'\"' -> go_str n (c:cs) '\"'
			c    -> go n (c:cs)

	-- try to catch occurrences of ' within an identifier
  go_char n (c:cs) | isAlphaNum c = go n ('\'':c:cs)
  go_char n cs = go_str n cs '\''

  go_str n cs end = do
    c <- alexGetChar
    case c of
	Nothing -> err
	Just c
	  | c == end  -> go n (c:cs)
	  | otherwise -> 
		case c of
		   '\\' -> do
			d <- alexGetChar
			case d of
			  Nothing -> err
			  Just d  -> go_str n (d:c:cs) end
		   c -> go_str n (c:cs) end
				  

alexEOF (p,"")   = return (T p EOFT)
alexEOF (p,rest) = err

err = error "lexical error" -- TODO

lexer :: String -> [Token]
lexer str = runAlex str $ do
  let loop = do tok <- alexScan; 
		case tok of
		  T _ EOFT -> return []
		  _ -> do toks <- loop
			  return (tok:toks)
  loop  

startcodes :: Int
startcodes = 1
{-# LINE 1 "GenericTemplate.hs" #-}
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- (c) Chris Dornan and Simon Marlow 2003

-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.

data AlexPosn = AlexPn !Int !Int !Int
	deriving (Eq,Show)

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (AlexPn a l c) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l c) _    = AlexPn (a+1)  l     (c+1)

-- -----------------------------------------------------------------------------
-- The Alex monad
--
-- Compile with -funbox-strict-fields for best results!

data AlexState = AlexState {
	alex_pos :: !AlexPosn,	-- position at current input location
	alex_inp :: String,	-- the current input
	alex_chr :: !Char,	-- the character before the input
	alex_scd :: !Int 	-- the current startcode
    }

type AlexInput = (AlexPosn,String)

runAlex :: String -> Alex a -> a
runAlex input (Alex f) 
   = snd (f (AlexState {alex_pos = alexStartPos,
 			alex_inp = input,	
			alex_chr = '\n',
			alex_scd = 0}))

--TODO include error support
newtype Alex a = Alex { unAlex :: AlexState -> (AlexState, a) }

instance Monad Alex where
  m >>= k  = Alex $ \s -> case unAlex m s of (s',a) -> unAlex (k a) s'
  return a = Alex $ \s -> (s,a)

alexGetChar :: Alex (Maybe Char)
alexGetChar = Alex $ \st@AlexState{ alex_inp = inp, alex_pos = pos } ->
		case inp of
		   [] -> (st, Nothing)
		   (c:s) -> (st {alex_inp = s, 
				 alex_pos = alexMove pos c}, 
			     Just c)

alexGetInput :: Alex AlexInput
alexGetInput = Alex $ \s@AlexState{alex_pos=pos,alex_inp=inp} -> (s, (pos,inp))

alexSetInput :: AlexInput -> Alex ()
alexSetInput (pos,inp) = Alex $ \s -> (s{alex_pos=pos,alex_inp=inp}, ())

alexGetLCtx :: Alex Char
alexGetLCtx = Alex $ \s@AlexState{alex_chr=c} -> (s, c)

alexSetLCtx :: Char -> Alex ()
alexSetLCtx c = Alex $ \s -> (s{alex_chr=c}, ())

alexGetStartCode :: Alex Int
alexGetStartCode = Alex $ \s@AlexState{alex_scd=sc} -> (s, sc)

alexSetStartCode :: Int -> Alex ()
alexSetStartCode sc = Alex $ \s -> (s{alex_scd=sc}, ())

-- -----------------------------------------------------------------------------
-- Useful token actions


-- just ignore this token and scan another one
skip input len = alexScan

-- ignore this token, but set the start code to a new value
begin code input len = do alexSetStartCode code; alexScan

-- perform an action for this token, and set the start code to a new value
(token `andBegin` code) input len = do alexSetStartCode code; token input len


-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine

{-# LINE 110 "GenericTemplate.hs" #-}























{-# LINE 154 "GenericTemplate.hs" #-}

alexIndexShortOffAddr arr off = arr ! off


-- -----------------------------------------------------------------------------
-- Main lexing routines



-- alexScan :: some a . Alex a
alexScan = do
  (startcode) <- alexGetStartCode  -- the startcode is the initial state
  cur_input <- alexGetInput
  c  <- alexGetLCtx 
  r <- alex_scan_tkn c c (0) startcode AlexNone
  case r of
    AlexNone ->



	alexEOF cur_input
    AlexLastAcc k c input len -> do



	alexSetInput input
	alexSetLCtx c
	k cur_input len

{-# LINE 199 "GenericTemplate.hs" #-}


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn lc c len ((-1)) last_acc = return last_acc
alex_scan_tkn lc c len s last_acc = do
  new_acc <- check_accs (alex_accept `unsafeAt` (s))
  c <- alexGetChar
  case c of
    Nothing -> return new_acc	-- end of input
    Just c' ->



	alex_scan_tkn lc c' 
		(len + (1)) s' new_acc
      	where
		base   = alexIndexShortOffAddr alex_base s
		(ord_c) = ord c'
		offset = (base + ord_c)
		check  = alexIndexShortOffAddr alex_check offset

		s' = 
		     if (offset >= (0)) && (check == ord_c)
			then alexIndexShortOffAddr alex_table offset
			else alexIndexShortOffAddr alex_deflt s
   where
	check_accs [] = return last_acc
	check_accs (AlexAcc _ a lctx rctx : rest) = 
	  case lctx of
	    Nothing  -> check_rctx
	    Just arr | arr!lc    -> check_rctx
		     | otherwise -> fail
	  where
	    fail = check_accs rest

	    ok = do inp <- alexGetInput
		    return (AlexLastAcc a c inp (len))

	    check_rctx = 
		case rctx of
		   Nothing -> ok
		   Just (sn) -> do
		      inp <- alexGetInput
		      acc <- alex_scan_tkn c c (0) sn AlexNone
		      alexSetInput inp
		      case acc of
			AlexNone      -> fail
			AlexLastAcc{} -> ok
			-- TODO: there's no need to find the longest
			-- match when checking the right context, just
			-- the first match will do.

data AlexLastAcc a = AlexNone | AlexLastAcc a Char AlexInput Int

data AlexAcc a = AlexAcc Int a (Maybe (Array Char Bool)) (Maybe Int)


