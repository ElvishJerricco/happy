-----------------------------------------------------------------------------
Changes from version 1.5 to 1.6

* Now written in, and generates, Haskell 98.

* Several bug fixes.

* A new option, -c, generates parsers that use GHC's unsafeCoerce# 
  primitive to speed up parsing and cut down the binary size.
  The -c option can only be used with the -g (GHC extensions) option.

* Parsers generated with the -g option will compile to smaller binaries
  now - some sources of parser-bloat were identified and squished.

* Happy has a new Open Source license, based on the BSD license.

* A sample Haskell parser using Happy is included.

-----------------------------------------------------------------------------
Changes from version 1.2 to version 1.5

* Many bug fixes to the error recovery support, found by experimenting
  with the Haskell grammar and layout.

* Happy is about 5 times faster on large examples, due to some
  changes in the LALR(1) algorithms.

-----------------------------------------------------------------------------
Changes from version 0.9a to version 1.2

* Supports Haskell 1.4

* Lots of bugs fixed

* Performance: the parser generator is at least 20% faster, and
  generated parsers should be faster due to the replacement of a
  data type with a newtype.

* Simple error recovery: designed to be enough to implement the
  Haskell layout rule.

* Revamped monad support: the monad can now be threaded through
  the lexer, enabling passing of state between the parser and the
  lexer (handy for the Haskell layout rule), and consistent error
  handling.

* The %newline feature is removed, the same effect can be achieved
  using the new monad support.

-----------------------------------------------------------------------------
Changes from version 0.8 to 0.9:

* Happy should be much faster than before.

* Generated parsers will be 5-10% smaller.

* Happy now compiles with ghc-0.26.

* Support for monadic parsers via %monad (see the documentation).

* New syntax: previously

	f :: { <type> }
	f : ...
	  | ...
	  etc.

  can now be written

	f :: { <type> }
	  : ...
	  | ...
	  etc.

  (i.e. omit the extra 'f'.  It was always ignored anyway :-)

* Miscellaneous bug fixes.
